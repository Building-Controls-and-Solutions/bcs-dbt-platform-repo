name: dbt Production Deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'bcs_platform/**'
      - 'profiles.yml'
      - '.github/workflows/dbt_prod.yml'
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      full_refresh:
        description: 'Run full refresh on incremental models'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  DBT_PROFILES_DIR: ./
  SNOWFLAKE_ACCOUNT: ftb40125.us-east-1

jobs:
  dbt-production:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install dbt-core dbt-snowflake
    
    - name: Test dbt connection
      env:
        SNOWFLAKE_PROD_USER: ${{ secrets.SNOWFLAKE_PROD_USER }}
        SNOWFLAKE_PROD_PASSWORD: ${{ secrets.SNOWFLAKE_PROD_PASSWORD }}
      run: |
        cd bcs_platform
        dbt debug --target prod
    
    - name: Install dbt dependencies
      env:
        SNOWFLAKE_PROD_USER: ${{ secrets.SNOWFLAKE_PROD_USER }}
        SNOWFLAKE_PROD_PASSWORD: ${{ secrets.SNOWFLAKE_PROD_PASSWORD }}
      run: |
        cd bcs_platform
        dbt deps --target prod
    
    - name: Run source freshness check
      env:
        SNOWFLAKE_PROD_USER: ${{ secrets.SNOWFLAKE_PROD_USER }}
        SNOWFLAKE_PROD_PASSWORD: ${{ secrets.SNOWFLAKE_PROD_PASSWORD }}
      run: |
        cd bcs_platform
        dbt source freshness --target prod
    
    - name: Run dbt snapshots
      env:
        SNOWFLAKE_PROD_USER: ${{ secrets.SNOWFLAKE_PROD_USER }}
        SNOWFLAKE_PROD_PASSWORD: ${{ secrets.SNOWFLAKE_PROD_PASSWORD }}
      run: |
        cd bcs_platform
        dbt snapshot --target prod
    
    - name: Run dbt models
      env:
        SNOWFLAKE_PROD_USER: ${{ secrets.SNOWFLAKE_PROD_USER }}
        SNOWFLAKE_PROD_PASSWORD: ${{ secrets.SNOWFLAKE_PROD_PASSWORD }}
      run: |
        cd bcs_platform
        if [ "${{ github.event.inputs.full_refresh }}" == "true" ]; then
          echo "Running full refresh"
          dbt run --target prod --full-refresh
        else
          echo "Running incremental"
          dbt run --target prod
        fi
    
    - name: Test dbt models
      env:
        SNOWFLAKE_PROD_USER: ${{ secrets.SNOWFLAKE_PROD_USER }}
        SNOWFLAKE_PROD_PASSWORD: ${{ secrets.SNOWFLAKE_PROD_PASSWORD }}
      run: |
        cd bcs_platform
        dbt test --target prod --store-failures
    
    - name: Generate dbt docs
      env:
        SNOWFLAKE_PROD_USER: ${{ secrets.SNOWFLAKE_PROD_USER }}
        SNOWFLAKE_PROD_PASSWORD: ${{ secrets.SNOWFLAKE_PROD_PASSWORD }}
      run: |
        cd bcs_platform
        dbt docs generate --target prod
    
    - name: Upload dbt artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dbt-prod-artifacts
        path: bcs_platform/target/
    
    - name: Deploy documentation to GitHub Pages
      if: success()
      run: |
        # This is a placeholder for deploying docs
        # You would typically copy target/*.json files to a docs site
        echo "Documentation generated successfully"
    
    - name: Send notification on failure
      if: failure()
      run: |
        echo "Production deployment failed - send notification"
        # Add notification logic here (Slack, email, etc.)
    
    - name: Create deployment record
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const status = '${{ job.status }}';
          const runId = '${{ github.run_id }}';
          const sha = '${{ github.sha }}';
          
          // Log deployment details
          console.log(`Deployment ${status}: Run ${runId}, SHA ${sha}`);
          
          // Could create a deployment record in GitHub or external system
          github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: runId,
            state: status,
            environment: 'production',
            description: `dbt production deployment ${status}`
          }).catch(err => console.log('Deployment status update skipped'));

  cleanup-old-schemas:
    runs-on: ubuntu-latest
    needs: dbt-production
    if: success()
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Cleanup old PR schemas
      env:
        SNOWFLAKE_PROD_USER: ${{ secrets.SNOWFLAKE_PROD_USER }}
        SNOWFLAKE_PROD_PASSWORD: ${{ secrets.SNOWFLAKE_PROD_PASSWORD }}
      run: |
        # This would contain logic to clean up old PR schemas
        # For example, drop schemas older than 7 days
        echo "Cleanup of old PR schemas would run here"